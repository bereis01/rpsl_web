import json
import argparse
from . import context, parsing
from shared.storage import ObjStr

# Instantiates connection to storage
output_path = "./objects/"
storage = ObjStr(output_path)

# Parses command line arguments
parser = argparse.ArgumentParser(
    prog="rpslweb data processor",
    description="Processes further the data generated by RPSLyzer",
    epilog="For use with rpslweb's backend",
)
parser.add_argument("-p", "--parsing", action="store_true")
parser.add_argument("-a", "--analysis", action="store_true")
parser.add_argument("-f", "--full", action="store_true")
args = parser.parse_args()


# Function for parsing rpslyzers output
def parse():
    # Reads the output from RPSLyzer
    # Converts all numeric data types to string
    print("***STARTING***\n")
    print("Reading input data...", end="", flush=True)
    f = open("./tmp/full.json")
    data = json.load(
        f,
        parse_float=lambda x: str(x),
        parse_int=lambda x: str(x),
        parse_constant=lambda x: str(x),
    )
    f.close()
    print("DONE")

    # Processes each key of RPSLyzer's output
    rpslyzer_keys = [
        "aut_nums",
        "as_sets",
        "route_sets",
        "peering_sets",
        "filter_sets",
        "as_routes",
    ]
    for key in rpslyzer_keys:
        print(f"Processing '{key}'...", end="", flush=True)
        parsing.process(key, data[key], storage)
        print("DONE")

    print("\n***FINISHING***")


# Function for generating more data on top of RPSLyzer
def analyse():
    pass


# Executes actions based on arguments
if args.full:
    parse()
    analyse()
    quit()
if args.parsing:
    parse()
if args.analysis:
    analyse()
