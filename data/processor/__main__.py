import os
import json
import argparse
from . import context
from shared.storage import ObjStr
from . import cleaning, restructuring, parsing, analysis

# Instantiates connection to storage
rpslyzer_output_path = os.getenv("DATA_INPUT_PATH")
storage = ObjStr(os.getenv("DATA_OUTPUT_PATH"))

# Parses command line arguments
parser = argparse.ArgumentParser(
    prog="rpslweb data processor",
    description="Processes further the data generated by RPSLyzer",
    epilog="For use with rpslweb's backend",
)
parser.add_argument("-r", "--restructure", action="store_true")
parser.add_argument("-c", "--clean", action="store_true")
parser.add_argument("-p", "--parse", action="store_true")
parser.add_argument("-x", "--preprocess", action="store_true")
parser.add_argument("-a", "--analyze", action="store_true")
parser.add_argument("-f", "--full", action="store_true")
args = parser.parse_args()


# Function for restructuring rpslyzers output
def restructure():
    # Opens the data
    data = storage.get_bucket("raw")

    # Calls the restructure module
    # Inplace modifications on data
    restructuring.process(data)

    # Writes back the cleaned data
    storage.set_bucket("preprocessed", data)


# Function for cleaning the restructured data
def clean():
    # Opens the data
    data = storage.get_bucket("preprocessed")

    # Calls the cleaning module
    # Inplace modifications on data
    cleaning.process(data)

    # Writes back the cleaned data
    storage.set_bucket("preprocessed", data)


# Function for parsing rpslyzers output
def parse():
    # Reads the output from RPSLyzer
    # Converts all numeric data types to string
    print("\n***STARTING***\n")
    print("Reading input data...", end="", flush=True)
    data = storage.get_bucket("preprocessed")
    print("DONE")

    # Processes each key of RPSLyzer's output
    rpslyzer_keys = [
        "aut_nums",
        "as_sets",
        "route_sets",
        "peering_sets",
        "filter_sets",
        "as_routes",
    ]
    for key in rpslyzer_keys:
        print(f"Processing '{key}'...", end="", flush=True)
        parsing.process(key, data[key], storage)
        print("DONE")

    print("\n***FINISHING***\n")
    del data


# Function for generating more data on top of RPSLyzer
def analyze():
    print("\n***STARTING***\n")

    # Processes the 'aut_nums' key
    print("Processing relationships...", end="", flush=True)
    as_nums = storage.get_key("metadata", "as_nums")
    imports = storage.get("asn-imports")
    exports = storage.get("asn-exports")
    analysis.process_relationships(storage, as_nums, imports, exports)

    print("DONE")

    print("\n***FINISHING***\n")
    del imports, exports, as_nums


# Executes actions based on arguments
if args.full:
    restructure()
    clean()
    parse()
    analyze()
    quit()
if args.preprocess:
    restructure()
    clean()
    parse()
    quit()
if args.restructure:
    restructure()
if args.clean:
    clean()
if args.parse:
    parse()
if args.analyze:
    analyze()
